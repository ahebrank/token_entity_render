<?php
/**
 * @file
 * Token Entity render module.
 */

use Drupal\Core\Render\BubbleableMetadata;
use Html2Text\Html2Text;

/**
 * Implements hook_token_info().
 */
function token_entity_render_token_info() {
  $tokens = [];
  $definitions = \Drupal::entityTypeManager()->getDefinitions();
  foreach ($definitions as $definition) {
    if ($definition instanceof ContentEntityType) {
      $entity_id = $definition->id();
      $label = $definition->getLabel();
      $token_type = \Drupal::service('token.entity_mapper')::getTokenTypeForEntityType($entity_id);
      $tokens[$definition] = [
        'render' => [
          'name' => t('Rendered @type', ['@type' => $entity_id]),
          'description' => t('Renders a @type using the pattern [@label:render:?], where ? stands for the view mode name.',
            [
              '@label' => $token_type,
              '@type' => $label,
            ])
            ],
        'render_text' => [
          'name' => t('Rendered @type (html stripped)', ['@type' => $label]),
          'description' => t('Text renders a @type using the pattern [@label:render:?], where ? stands for the view mode name.',
            [
              '@label' => $token_type,
              '@type' => $label,
            ]),
            ],
          ];
    }
  }
  return ['tokens' => $tokens];
}

/**
 * Implements hook_tokens().
 */
function token_entity_render_tokens($type, $tokens, array $data = [], array $options = [], BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  $langcode = !empty($options['language']->language) ? $options['language']->language : NULL;

  foreach ($tokens as $name => $original) {
    $parts = explode(':', $name);
    if ($parts[0] == 'render' || $parts[0] == 'render_text') {
      $view_mode = 'full';

      $entity = $data['entity'];
      $entity_type = $entity->getEntityTypeId();

      if (isset($parts[1])) {
        $available_view_modes = \Drupal::entityQuery('entity_view_mode')
          ->condition('targetEntityType', $entity_type)
          ->execute();
        if (isset($available_view_modes[$parts[1]])) {
          $view_mode = $parts[1];
        }
      }

      $render_controller = \Drupal::entityTypeManager()->getViewBuilder($entity_type);
      $rendered_entity = $render_controller->view($entity, $view_mode, $langcode);
      $output = \Drupal::service('renderer')->render($rendered_entity);

      if ($parts[0] == 'render_text') {
        // convert html to txt
        $output = Html2Text::convert($output);
      }

      $replacements[$original] = $output;
    }
  }

  return $replacements;
}
